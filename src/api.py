"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API RanobeLIB
"""

import requests
import time
from typing import Optional, Dict, List, Any, Deque, Callable
from urllib.parse import urlparse
from collections import deque

REQUESTS_LIMIT = 90  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
REQUESTS_PERIOD = 60  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
REQUEST_TIMEOUT = 10  # 10 —Å–µ–∫—É–Ω–¥
RETRY_DELAYS = [3, 3, 30, 30, 30]  # —Å–µ–∫—É–Ω–¥—ã

class RanobeLibAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API RanobeLIB"""
    
    def __init__(self):
        self.api_url = "https://api.cdnlibs.org/api/manga/"
        self.site_url = "https://ranobelib.me"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        self.request_timestamps: Deque[float] = deque()
        self.token_refresh_callback: Optional[Callable[[], bool]] = None
    
    def set_token_refresh_callback(self, callback: Callable[[], bool]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
        self.token_refresh_callback = callback

    def set_token(self, token: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        token = token.strip()
        if token:
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–º –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            self.session.headers["Authorization"] = f"Bearer {token}"
            self.session.headers.setdefault("Origin", self.site_url)
            self.session.headers.setdefault("Referer", f"{self.site_url}/")
    
    def clear_token(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ—Å—Å–∏–∏."""
        if "Authorization" in self.session.headers:
            del self.session.headers["Authorization"]
    
    def make_request(self, url: str, params: Optional[Dict[str, Any]] = None, retry: bool = True, upcoming_requests: int = 0) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∞—Å—Ç–æ—Ç—ã, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        self._wait_for_rate_limit(upcoming_requests=upcoming_requests)

        if not retry:
            try:
                return self._perform_request(url, params)
            except requests.exceptions.RequestException:
                return {}

        return self._retry_request(self._perform_request, url, params)
    
    def extract_slug_from_url(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ slug –∏–∑ URL –Ω–æ–≤–µ–ª–ª—ã."""
        parsed_url = urlparse(url)
        path_parts = parsed_url.path.strip('/').split('/')
        
        if len(path_parts) >= 3 and path_parts[0] == "ru" and path_parts[1] == "book":
            return path_parts[2]
        return None
    
    def get_novel_info(self, slug: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–µ–ª–ª–µ."""
        fields = [
            "summary", "genres", "tags", "teams", "authors", 
            "status_id", "artists", "format", "publisher"
        ]
        
        url_params = "&".join([f"fields[]={field}" for field in fields])
        url = f"{self.api_url}{slug}?{url_params}"
        
        data = self.make_request(url)
        return data.get("data", {})
    
    def get_novel_chapters(self, slug: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤ –Ω–æ–≤–µ–ª–ª—ã."""
        url = f"{self.api_url}{slug}/chapters"
        data = self.make_request(url)
        return data.get("data", [])
    
    def get_chapter_content(self, slug: str, volume: str, number: str, branch_id: Optional[str] = None, upcoming_requests: int = 0) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≥–ª–∞–≤—ã."""
        url = f"{self.api_url}{slug}/chapter"
        params = {"volume": volume, "number": number}
        if branch_id:
            params["branch_id"] = branch_id

        data = self.make_request(url, params=params, upcoming_requests=upcoming_requests)
        return data.get("data", {})
    
    def get_current_user(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        url = "https://api.cdnlibs.org/api/auth/me"
        data = self.make_request(url, retry=False)
        return data.get("data", {})
        
    def _wait_for_rate_limit(self, upcoming_requests: int = 0) -> None:
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤."""
        current_time = time.time()
        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        while self.request_timestamps and current_time - self.request_timestamps[0] > REQUESTS_PERIOD:
            self.request_timestamps.popleft()

        # –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–µ–∫—É—â–∏–µ + –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ + 1) –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        if len(self.request_timestamps) + upcoming_requests + 1 <= REQUESTS_LIMIT:
            self.request_timestamps.append(time.time())
            return

        while True:
            current_time = time.time()

            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            while self.request_timestamps and current_time - self.request_timestamps[0] > REQUESTS_PERIOD:
                self.request_timestamps.popleft()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            if len(self.request_timestamps) >= REQUESTS_LIMIT:
                wait_duration = (self.request_timestamps[0] + REQUESTS_PERIOD) - current_time
                if wait_duration > 0:
                    time.sleep(wait_duration)
                continue  # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è

            # –ü–ª–∞–≤–∞—é—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if self.request_timestamps:
                time_until_period_end = REQUESTS_PERIOD - (current_time - self.request_timestamps[0])
                remaining_requests = max(1, REQUESTS_LIMIT - len(self.request_timestamps))
                average_spacing = time_until_period_end / remaining_requests
                
                # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –µ–≥–æ –≤ –∑–∞–¥–µ—Ä–∂–∫–µ
                time_before_sleep = time.time()
                elapsed_since_loop_start = time_before_sleep - current_time
                
                # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π
                sleep_duration = average_spacing - elapsed_since_loop_start
                if sleep_duration > 0:
                    time.sleep(sleep_duration)

            break  # –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.request_timestamps.append(time.time())
    
    def _retry_request(self, func: Callable, *args, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        for i, delay in enumerate(RETRY_DELAYS):
            try:
                return func(*args, **kwargs)
            except requests.exceptions.RequestException as e:
                is_last_attempt = i == len(RETRY_DELAYS) - 1
                is_long_delay = delay >= 30
                
                if is_long_delay:
                    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                
                if is_last_attempt:
                    print(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    raise
                
                time.sleep(delay)
        
        return {}

    def _perform_request(self, url: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞."""
        try:
            response = self.session.get(
                url, params=params, timeout=REQUEST_TIMEOUT
            )
            
            if response.status_code == 401 and self.token_refresh_callback:
                print("\nüîë –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                if self.token_refresh_callback():
                    print("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...")
                    response = self.session.get(
                        url, params=params, timeout=REQUEST_TIMEOUT
                    )
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
            
            if response.status_code == 404:
                try:
                    return response.json()
                except requests.exceptions.JSONDecodeError:
                    return {}
            
            response.raise_for_status()
            return response.json()
        except requests.exceptions.JSONDecodeError:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ –¥–ª—è URL: {url}")
            raise 