"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FB2 —Ñ–∞–π–ª–æ–≤
"""

import os
import base64
import mimetypes
import datetime
from typing import Dict, List, Any, Optional, Tuple, Set

from bs4 import BeautifulSoup, Tag

from ..processing import ContentProcessor


class Fb2Creator(ContentProcessor):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FB2-—Ñ–∞–π–ª–æ–≤"""

    # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω FB2
    _FB2_NAMESPACE = "http://www.gribuser.ru/xml/fictionbook/2.0"
    _XLINK_NAMESPACE = "http://www.w3.org/1999/xlink"

    def __init__(self, api, parser, image_handler):
        super().__init__(api, parser, image_handler)

    @property
    def format_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–∏–≥–∏."""
        return "FB2"

    def create(
        self,
        novel_info: Dict[str, Any],
        chapters_data: List[Dict[str, Any]],
        selected_branch_id: Optional[str] = None,
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ FB2-—Ñ–∞–π–ª–∞ —Å –≥–ª–∞–≤–∞–º–∏ –Ω–æ–≤–µ–ª–ª—ã."""
        _, image_folder = self.prepare_dirs(novel_info.get("id"))

        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–ª–∞–≤ –∏ –æ–±–ª–æ–∂–∫–∏
        prepared_chapters = self.prepare_chapters(
            novel_info, chapters_data, selected_branch_id, image_folder
        )
        cover_filename = self.download_cover(novel_info, image_folder)

        # 2. –°–±–æ—Ä–∫–∞ —á–∞—Å—Ç–µ–π FB2
        description_xml = self._build_description_xml(novel_info, cover_filename)
        body_xml, referenced_images = self._build_body_xml(prepared_chapters, novel_info)
        binaries_xml = self._build_binaries_xml(image_folder, referenced_images, cover_filename)

        # 3. –°–±–æ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        fb2_full = (
            '<?xml version="1.0" encoding="utf-8"?>\n'
            f'<FictionBook xmlns="{self._FB2_NAMESPACE}" xmlns:l="{self._XLINK_NAMESPACE}">\n'
            f"{description_xml}\n{body_xml}\n{binaries_xml}\n"
            "</FictionBook>"
        )

        title = self.extract_title_author_summary(novel_info)[0]
        fb2_filename = self.get_safe_filename(title, "fb2")

        with open(fb2_filename, "w", encoding="utf-8") as f:
            f.write(fb2_full)

        return fb2_filename

    def _html_to_fb2(self, html: str) -> Tuple[str, Set[str]]:
        """–ë–∞–∑–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ FB2-—Ä–∞–∑–º–µ—Ç–∫—É."""
        soup = BeautifulSoup(html, "html.parser")
        referenced_images: Set[str] = set()

        for img in soup.find_all("img"):
            if isinstance(img, Tag) and img.has_attr("src"):
                src = os.path.basename(str(img["src"]))
                referenced_images.add(src)
                new_tag = soup.new_tag("image", attrs={"l:href": f"#{src}"})
                img.replace_with(new_tag)

        for i_tag in soup.find_all(["i", "em"]):
            if isinstance(i_tag, Tag):
                i_tag.name = "emphasis"
        for b_tag in soup.find_all(["b", "strong"]):
            if isinstance(b_tag, Tag):
                b_tag.name = "strong"

        output_parts: List[str] = []
        for element in soup.contents:
            text = str(element).strip()
            if not text:
                continue

            if isinstance(element, Tag) and element.name == "image":
                output_parts.append(str(element))
            elif text.lower().startswith("<p"):
                output_parts.append(text)
            else:
                output_parts.append(f"<p>{text}</p>")

        return "\n".join(output_parts), referenced_images

    def _encode_image(self, path: str) -> Tuple[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç MIME-—Ç–∏–ø –∏ base64-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞."""
        mime = mimetypes.guess_type(path)[0] or "image/jpeg"
        with open(path, "rb") as f:
            encoded = base64.b64encode(f.read()).decode("ascii")
        return mime, encoded

    def _build_description_xml(
        self, novel_info: Dict[str, Any], cover_filename: Optional[str]
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ XML-–±–ª–æ–∫–∞ <description> –¥–ª—è FB2."""
        title, author, annotation, genres = self.extract_title_author_summary(novel_info)
        year = self.extract_year(novel_info) or str(datetime.datetime.now().year)

        genres_xml = "\n    ".join(f"<genre>{g}</genre>" for g in genres)
        author_xml = f"<author>\n      <nickname>{author}</nickname>\n    </author>" if author else ""
        cover_xml = f'<coverpage>\n      <image l:href="#{cover_filename}"/>\n    </coverpage>' if cover_filename else ""
        
        if annotation:
            annotation_lines = [f"      <p>{line.strip()}</p>" for line in annotation.split('\n') if line.strip()]
            annotation_xml = f"<annotation>\n{'\n'.join(annotation_lines)}\n    </annotation>"
        else:
            annotation_xml = ""

        return f"""\
<description>
  <title-info>
    {genres_xml}
    {author_xml}
    <book-title>{title}</book-title>
    {annotation_xml}
    {cover_xml}
    <date value="{year}">{year}</date>
    <lang>ru</lang>
  </title-info>
  <document-info>
    <id>ranobelib-{novel_info.get('id')}</id>
    <version>1.0</version>
    <date value="{datetime.date.today().isoformat()}"/>
  </document-info>
</description>"""

    def _build_body_xml(
        self,
        prepared_chapters: List[Dict[str, Any]],
        novel_info: Dict[str, Any],
    ) -> Tuple[str, Set[str]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ XML-–±–ª–æ–∫–∞ <body> –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        volume_chapters: Dict[str, List[str]] = {}
        all_referenced_images: Set[str] = set()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–º–æ–≤ –≤–æ –≤—Å–µ–π –Ω–æ–≤–µ–ª–ª–µ
        total_volumes = self.get_total_volume_count(novel_info)

        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ FB2...")
        for i, prep in enumerate(prepared_chapters, 1):
            ch_name = self.parser.decode_html_entities(prep.get("name", "").strip())
            vol_num = str(prep["volume"])

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–º–æ–≤
            if total_volumes > 1 and not self.group_by_volumes and vol_num != "0":
                chapter_title = f'–¢–æ–º {vol_num} –ì–ª–∞–≤–∞ {prep["number"]}'
            else:
                chapter_title = f'–ì–ª–∞–≤–∞ {prep["number"]}'

            if ch_name:
                chapter_title += f" - {ch_name}"

            fb2_fragment, images = self._html_to_fb2(prep["html"])
            all_referenced_images.update(images)
            section_xml = f"""\
<section id="ch{i}"><title><p>{chapter_title}</p></title>
{fb2_fragment}
</section>"""
            volume_chapters.setdefault(vol_num, []).append(section_xml)

        body_parts = []
        if self.group_by_volumes and total_volumes > 1 and volume_chapters:
            for vol_num in sorted(volume_chapters.keys(), key=lambda x: int(x) if x.isdigit() else 0):
                chapters_xml = "\n".join(volume_chapters[vol_num])
                body_parts.append(
                    f'<section id="vol{vol_num}"><title><p>–¢–æ–º {vol_num}</p></title>{chapters_xml}</section>'
                )
        elif volume_chapters:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –≤–æ –≤—Å–µ–π –Ω–æ–≤–µ–ª–ª–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–º
            for vol_num in sorted(volume_chapters.keys(), key=lambda x: int(x) if x.isdigit() else 0):
                body_parts.extend(volume_chapters[vol_num])

        return f"<body>\n{''.join(body_parts)}\n</body>", all_referenced_images

    def _build_binaries_xml(
        self, image_folder: str, referenced_images: Set[str], cover_filename: Optional[str]
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ XML-–±–ª–æ–∫–∞ —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        if not os.path.exists(image_folder):
            return ""

        binaries_parts = []
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±–ª–æ–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if cover_filename:
            referenced_images.add(cover_filename)

        for filename in referenced_images:
            image_path = os.path.join(image_folder, filename)
            if not os.path.exists(image_path):
                print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫.")
                continue
            try:
                mime, data_b64 = self._encode_image(image_path)
                binaries_parts.append(
                    f'<binary id="{filename}" content-type="{mime}">{data_b64}</binary>'
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {filename} –≤ FB2: {e}")

        return "\n".join(binaries_parts) 