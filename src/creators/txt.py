"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TXT —Ñ–∞–π–ª–æ–≤
"""

import re
from typing import Any, Dict, List, Optional

from bs4 import BeautifulSoup

from ..processing import ContentProcessor


class TxtCreator(ContentProcessor):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TXT-—Ñ–∞–π–ª–æ–≤"""

    @property
    def format_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–∏–≥–∏."""
        return "TXT"

    def create(
        self,
        novel_info: Dict[str, Any],
        chapters_data: List[Dict[str, Any]],
        selected_branch_id: Optional[str] = None,
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ TXT —Ñ–∞–π–ª–∞ —Å –≥–ª–∞–≤–∞–º–∏ –Ω–æ–≤–µ–ª–ª—ã."""
        # –î–ª—è TXT —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã, –Ω–æ prepare_chapters –º–æ–∂–µ—Ç –∏—Ö —Å–∫–∞—á–∏–≤–∞—Ç—å.
        # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞.
        _, image_folder = self.prepare_dirs(novel_info.get("id"))

        prepared_chapters = self.prepare_chapters(
            novel_info, chapters_data, selected_branch_id, image_folder
        )
        
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ {self.format_name}...")

        full_text = self._build_text_content(novel_info, prepared_chapters)
        
        title, _, _, _ = self.extract_title_author_summary(novel_info)
        txt_filename = self.get_safe_filename(title, "txt")

        with open(txt_filename, "w", encoding="utf-8") as f:
            f.write(full_text)

        return txt_filename

    def _build_text_content(
        self, novel_info: Dict[str, Any], prepared_chapters: List[Dict[str, Any]]
    ) -> str:
        """–°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–∏–≥–∏."""
        title, author, _, _ = self.extract_title_author_summary(novel_info)

        lines = [title]
        if author:
            lines.append(f"–ê–≤—Ç–æ—Ä: {author}")
        lines.append("\n" + "=" * 60 + "\n")

        volume_chapters: Dict[str, List[Dict[str, Any]]] = {}
        for chapter in prepared_chapters:
            volume_chapters.setdefault(str(chapter["volume"]), []).append(chapter)

        sorted_volumes = sorted(
            volume_chapters.keys(), key=lambda x: int(x) if x.isdigit() else 0
        )

        total_volumes = self.get_total_volume_count(novel_info)

        for vol_num in sorted_volumes:
            if self.group_by_volumes and total_volumes > 1:
                lines.append(f"–¢–æ–º {vol_num}\n")
                lines.append("-" * 60 + "\n")

            for prep in volume_chapters[vol_num]:
                lines.append(self._format_chapter_to_text(prep, vol_num, total_volumes))

        return "\n".join(lines)

    def _format_chapter_to_text(self, prepared_chapter: Dict[str, Any], volume: str, total_volumes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –≥–ª–∞–≤—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫."""
        ch_name = self.parser.decode_html_entities(
            prepared_chapter.get("name", "").strip()
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–º–æ–≤
        if total_volumes > 1 and not self.group_by_volumes and volume != "0":
            chapter_title = f'–¢–æ–º {volume} –ì–ª–∞–≤–∞ {prepared_chapter["number"]}'
        else:
            chapter_title = f'–ì–ª–∞–≤–∞ {prepared_chapter["number"]}'
            
        if ch_name:
            chapter_title += f" - {ch_name}"

        html_content = prepared_chapter["html"]
        plain_text = self._html_to_text(html_content)

        return f"{chapter_title}\n\n{plain_text}\n\n"

    def _html_to_text(self, html: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç."""
        if not html:
            return ""
        soup = BeautifulSoup(html, "html.parser")

        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ img, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –≤ txt
        for img in soup.find_all("img"):
            img.decompose()

        # get_text —Å separator='\n' —Ö–æ—Ä–æ—à–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ—á–Ω—ã–µ —Ç–µ–≥–∏
        text = soup.get_text(separator="\n")

        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        lines = [line.strip() for line in text.splitlines()]
        non_empty_lines = [line for line in lines if line]
        clean_text = "\n".join(non_empty_lines)
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –æ–¥–∏–Ω –¥–≤–æ–π–Ω–æ–π
        return re.sub(r'\n{3,}', '\n\n', clean_text) 