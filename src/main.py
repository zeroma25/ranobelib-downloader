"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RanobeLIB API
"""

import os
import re
import shutil
import signal
import sys
from typing import Any, Dict, List, Optional

from . import __version__
from .api import OperationCancelledError, RanobeLibAPI
from .auth import RanobeLibAuth
from .branches import (
    get_branch_info_for_display,
    get_formatted_branches_with_teams,
    get_unique_chapters_count,
)
from .creators import EpubCreator, Fb2Creator, HtmlCreator, TxtCreator
from .img import ImageHandler
from .parser import RanobeLibParser
from .settings import USER_DATA_DIR, settings


def main(use_gui: bool = False):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    if use_gui:
        try:
            from .gui.app import run_gui

            return run_gui()
        except ImportError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            print("‚ÑπÔ∏è –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...")
            return run_cli()

    return run_cli()


def run_cli():
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏."""
    api = RanobeLibAPI()
    auth = RanobeLibAuth(api)
    parser = RanobeLibParser(api)
    image_handler = ImageHandler(api)
    api.set_token_refresh_callback(auth.refresh_token)

    def signal_handler(sig, frame):
        api.cancel_pending_requests()

    signal.signal(signal.SIGINT, signal_handler)

    creators = [
        EpubCreator(api, parser, image_handler),
        Fb2Creator(api, parser, image_handler),
        HtmlCreator(api, parser, image_handler),
        TxtCreator(api, parser, image_handler),
    ]

    _print_header()
    _handle_authentication(auth)
    print("‚îÄ" * 60)

    _show_settings()

    if _ask_change_settings():
        _change_settings()
    print("‚îÄ" * 60)

    slug = _get_novel_slug(api)

    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–µ–ª–ª–µ...")
    novel_info = api.get_novel_info(slug)
    if not novel_info.get("id"):
        print(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–µ–ª–ª–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."
        )
        return

    title_raw = novel_info.get("rus_name") or novel_info.get("eng_name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    title = re.sub(r"\s*\((?:–ù–æ–≤–µ–ª–ª–∞|Novel)\)\s*$", "", title_raw, flags=re.IGNORECASE).strip()
    print(f"üìñ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")

    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤...")
    chapters_data = api.get_novel_chapters(slug)
    if not chapters_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤.")
        return

    branches = get_formatted_branches_with_teams(novel_info, chapters_data)
    selected_branch_id = _select_branch(branches, chapters_data)
    if not selected_branch_id:
        return

    selected_creators = _select_output_formats(creators)

    if selected_creators:
        _generate_books(
            novel_info,
            chapters_data,
            selected_branch_id,
            selected_creators,
        )

    _cleanup_temp_folder(novel_info.get("id"))


def _print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    print("‚ïê" * 60)
    print(f"üìö RanobeLIB Downloader v{__version__} üìö".center(60))
    print("‚ïê" * 60)


def _handle_authentication(auth: RanobeLibAuth):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    token_data = auth.load_token()
    user_info = None

    if token_data and "access_token" in token_data:
        auth.api.set_token(token_data["access_token"])
        user_info = auth.validate_token()
        if user_info:
            print(f"üîë –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –∫–∞–∫: {user_info.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}")
            return

        print("‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        if "refresh_token" in token_data:
            if auth.refresh_token():
                user_info = auth.validate_token()
                if user_info:
                    print(f"üîë –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –∫–∞–∫: {user_info.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}")
                    return

    choice = input("üîë –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ? (y/n): ").strip().lower()
    if choice in {"y", "yes", "–¥–∞", "–¥", "1"}:
        if auth.authorize_with_webview():
            user_info = auth.validate_token()
            if user_info:
                print(f"üîë –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –∫–∞–∫: {user_info.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}")
    else:
        print("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—á–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")


def _show_settings():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    print("‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  ‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É: {'‚úÖ' if settings.get('download_cover') else '‚ùå'}")
    print(f"  ‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {'‚úÖ' if settings.get('download_images') else '‚ùå'}")
    print(f"  ‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ: {'‚úÖ' if settings.get('add_translator') else '‚ùå'}")
    print(f"  ‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–æ–º–∞–º: {'‚úÖ' if settings.get('group_by_volumes') else '‚ùå'}")
    print(f"  ‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {settings.get('save_directory')}")


def _ask_change_settings():
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    choice = input("üõ†Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n): ").strip().lower()
    return choice in {"y", "yes", "–¥–∞", "–¥", "1"}


def _change_settings():
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    print("‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:")

    choice = (
        input(f"  –°–∫–∞—á–∏–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É? (y/n) [{('y' if settings.get('download_cover') else 'n')}]: ")
        .strip()
        .lower()
    )
    if choice:
        settings.set("download_cover", choice in {"y", "yes", "–¥–∞", "–¥", "1"})

    choice = (
        input(f"  –°–∫–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≥–ª–∞–≤? (y/n) [{('y' if settings.get('download_images') else 'n')}]: ")
        .strip()
        .lower()
    )
    if choice:
        settings.set("download_images", choice in {"y", "yes", "–¥–∞", "–¥", "1"})

    choice = (
        input(f"  –î–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ? (y/n) [{('y' if settings.get('add_translator') else 'n')}]: ")
        .strip()
        .lower()
    )
    if choice:
        settings.set("add_translator", choice in {"y", "yes", "–¥–∞", "–¥", "1"})

    choice = (
        input(f"  –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤—ã –ø–æ —Ç–æ–º–∞–º? (y/n) [{('y' if settings.get('group_by_volumes') else 'n')}]: ")
        .strip()
        .lower()
    )
    if choice:
        settings.set("group_by_volumes", choice in {"y", "yes", "–¥–∞", "–¥", "1"})

    current_dir = settings.get("save_directory")
    new_dir = input(f"  –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è [{current_dir}]: ").strip()
    if new_dir:
        if not os.path.exists(new_dir):
            try:
                os.makedirs(new_dir, exist_ok=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: {new_dir}")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥: {e}")
                new_dir = current_dir
        settings.set("save_directory", os.path.abspath(new_dir))

    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


def _get_novel_slug(api: RanobeLibAPI) -> str:
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤–µ–ª–ª—É –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –Ω–µ–µ slug."""
    while True:
        novel_url = input("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–µ–ª–ª—É: ")
        slug = api.extract_slug_from_url(novel_url)
        if slug:
            return slug
        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: https://ranobelib.me/ru/book/11407--solo-leveling")


def _select_branch(branches: Dict, chapters_data: List[Dict[str, Any]]) -> Optional[str]:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ç–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö."""
    if not branches:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–µ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –≥–ª–∞–≤–∞–º–∏.")
        return None

    if len(branches) == 1:
        branch_id = next(iter(branches))
        print(f"üí¨ –ü–µ—Ä–µ–≤–æ–¥: {get_branch_info_for_display(branches[branch_id])}")
        return branch_id

    print("‚îÄ" * 60)
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã:")

    display_options = []

    default_option = (
        "default",
        f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é [–ê–≤—Ç–æ–≤—ã–±–æ—Ä] ({get_unique_chapters_count(chapters_data)} –≥–ª–∞–≤)",
    )
    display_options.append(default_option)

    sorted_branches = sorted(branches.items(), key=lambda x: x[1]["chapter_count"], reverse=True)
    for branch_id, branch_info in sorted_branches:
        display_options.append((branch_id, get_branch_info_for_display(branch_info)))

    for i, (_, display_str) in enumerate(display_options):
        print(f"  {i+1}. {display_str}")

    while True:
        try:
            choice = int(input("üìë –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ (–Ω–æ–º–µ—Ä): "))
            if 1 <= choice <= len(display_options):
                return display_options[choice - 1][0]
            print(f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(display_options)}")
        except ValueError:
            print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


def _select_output_formats(creators: List[Any]) -> List[Any]:
    """–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏."""
    if not creators:
        return []

    options = {f"{i+1}": creator for i, creator in enumerate(creators)}
    has_all_option = len(creators) > 1
    all_option_num = str(len(creators) + 1) if has_all_option else None

    while True:
        print("‚îÄ" * 60)
        print("‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç—ã:")
        for i, creator in enumerate(creators):
            print(f"  {i+1}. {creator.format_name}")
        if has_all_option:
            print(f"  {all_option_num}. –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã")

        prompt = "üìë –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç(—ã) (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): "
        choice_str = input(prompt).strip()

        choices = {c.strip() for c in choice_str.split(",")}

        if not choices:
            print("‚ö†Ô∏è –í—ã–±–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

        if has_all_option and all_option_num in choices:
            if len(choices) > 1:
                print(f"‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ '{all_option_num}. –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã', –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.")
                continue
            return creators

        selected_creators = set()
        invalid_choices = []

        for choice in choices:
            if choice in options:
                selected_creators.add(options[choice])
            else:
                invalid_choices.append(choice)

        if invalid_choices:
            print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: {', '.join(sorted(invalid_choices))}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

        if selected_creators:
            return [c for c in creators if c in selected_creators]


def _generate_books(
    novel_info,
    chapters_data,
    selected_branch_id,
    creators: List[Any],
):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–Ω–∏–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö."""
    print("‚îÄ" * 60)
    for creator in creators:
        try:
            creator.update_settings()

            filename = creator.create(novel_info, chapters_data, selected_branch_id)
            print(f"‚úÖ {creator.format_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")
        except OperationCancelledError:
            raise
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {creator.format_name}: {e}")


def _cleanup_temp_folder(novel_id: Any):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏."""
    temp_dir = os.path.join(USER_DATA_DIR, "temp", f"images_{novel_id}")
    if os.path.exists(temp_dir):
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        try:
            shutil.rmtree(temp_dir)
        except OSError as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {temp_dir}: {e}")


if __name__ == "__main__":
    try:
        use_gui = "--gui" in sys.argv or "-g" in sys.argv
        main(use_gui)
    finally:
        print("‚ïê" * 60)
        input("üëã –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...") 